require("dotenv").config();const express=require("express"),mongoose=require("mongoose"),passport=require("passport"),LocalStrategy=require("passport-local").Strategy,session=require("express-session"),path=require("path"),fs=require("fs"),bcrypt=require("bcryptjs"),nodemailer=require("nodemailer"),bodyParser=require("body-parser"),{config:e,configDotenv:r}=require("dotenv"),axios=require("axios"),Razorpay=require("razorpay"),multer=require("multer"),{type:s}=require("os"),app=express(),PORT=3e3,findOrCreate=require("mongoose-findorcreate"),GoogleStrategy=require("passport-google-oauth20").Strategy,passportLocalMongoose=require("passport-local-mongoose");app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views")),app.use(express.static(path.join(__dirname,"public"))),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),mongoose.connect(process.env.MONGO_URL);const userSchema=new mongoose.Schema({username:String,password:String,phone:Number,nameU:String,dob:String,firstLetterOfUser:String,googleId:String,details:[{ownerDetails:{nameOfHouseOwner:String,emailOfOwner:String,phnNumberCode:String,ownerPhnNumber:String,pincodeOfOwner:Number,propertyType:String,rentOrSell:String,rentpay:String,cityName:String},propertyDetails:{propertyAddress:String,propertySize:String,minPrice:Number,maxPrice:Number,propertyDescription:String,propertyType:String},propertyImages:[{name:String,data:Buffer,contentType:String},]}],notifications:[{message:String,timestamp:{type:Date,default:Date.now}}]});userSchema.plugin(passportLocalMongoose),userSchema.plugin(findOrCreate);const User=mongoose.model("User",userSchema),storage=multer.memoryStorage(),upload=multer({storage:storage}),emailForAdd=new mongoose.Schema({emailAdvertise:String}),emailAdvertise=mongoose.model("userAdd",emailForAdd);function checkLogin(e,r,s){e.session.userId?s():setTimeout(()=>{r.render("index",{messForClient:"You are not logged in to perform this activity..."})},2e3)}app.use(session({secret:"yourdfijsukghruheuuklsfdnksdhskndsdnngfdggfdghgfdgsfdfhjtyktesegeswehrhmcskksksfshfbsbhdhdebfhsdhz",resave:!1,saveUninitialized:!0})),app.use(passport.initialize()),app.use(passport.session()),app.get("/",async(e,r)=>{try{let s=e.session.userId;s||r.render("index",{messForClient:"Login please..."})}catch(t){console.log(t)}}),app.get("/home",async(e,r)=>{try{let s=e.session.userId,t=await User.findById(s);s?r.render("index",{messForClient:"Welcome... "+t.nameU}):r.render("index",{messForClient:"Login please..."})}catch(o){console.log(o)}}),app.get("/RentEase-about-us",(e,r)=>{r.render("RentEase-about-us")}),app.get("/your-property-listing",checkLogin,async(e,r)=>{try{let s=e.session.userId,t=await User.findById(s);if(!t)return r.status(404).send("User not found");let o=t.details.map(e=>({ownerDetails:e.ownerDetails,propertyDetails:e.propertyDetails,propertyImages:e.propertyImages}));r.render("yourpropertylisting",{propertyListings:o})}catch(a){console.error("Error retrieving property listings:",a),r.status(500).send("Internal Server Error")}}),app.get("/approvalsuccess",(e,r)=>{r.render("approvalsuccess")}),app.get("/requestsent",(e,r)=>{r.render("requestsent")}),app.post("/send-email-otp",async(e,r)=>{try{let s=e.body.username,t=(1e4*Math.random()).toFixed(0);e.session.otp=t;let o=nodemailer.createTransport({host:process.env.hostEmail,port:587,secure:!1,auth:{user:process.env.userEmail,pass:process.env.passEmail}}),a={from:"yashsabne39@gmail.com",to:s,subject:"OTP for registration",html:`<p>Hello ${s},</p><p>Nice to see you here. Here is your OTP for login: <strong>${t}</strong></p>`};o.sendMail(a,(e,s)=>e?(console.error(e),r.status(500).send("Error sending email")):r.status(200).send("Email sent successfully"))}catch(n){console.log("Error occurred",n),r.status(500).json({error:"Error sending OTP"})}}),app.post("/verify-otp",(e,r)=>{let{username:s,otp:t}=e.body;t===e.session.otp?r.json({success:!0}):r.json({success:!1})}),app.post("/register",async function(e,r){let s=e.body.username,t=new User({username:e.body.username,password:e.body.password,phone:e.body.phone,nameU:e.body.fullName,dob:e.body.dob,firstLetterOfUser:s.charAt(0)});try{let o=await User.findOne({username:s});if(o)return"User already exists";let a=await bcrypt.hash(e.body.password,10);t.password=a,await t.save(),r.render("index",{messForClient:"registered successfully, please login..."})}catch(n){console.error(n),r.status(500).render("error",{errorMessage:"Internal Server Error"})}}),app.post("/login",async function(e,r){try{let s=e.body.username,t=e.body.password,o=await User.findOne({username:s});if(o){let a=await bcrypt.compare(t,o.password);if(a){e.session.userId=o._id,e.session.save();let n=await User.findById(e.session.userId);r.render("index",{messForClient:"Welcome... "+n.nameU,loading:`<div class="spinner-border" role="status">
                 <span class="sr-only">Loading...</span>
               </div>`})}else r.render("index",{errorMessage:"Incorrect username or password"})}else r.render("index",{errorMessage:"User not found"})}catch(i){console.error(i),r.status(500).send("Internal Server Error")}}),app.get("/logout",(e,r)=>{e.session.destroy(e=>{e&&console.error("Error destroying session:",e),r.redirect("/")})}),app.get("/rent-sell-home",checkLogin,(e,r)=>{let s=e.query.page||"firstpage";"firstpage"===s?r.render("rentHome"):"secondPage"===s?r.render("secondRent"):"thirdPage"===s?r.render("thirdRent"):r.render("index",{messForClient:"Invalid page request"})}),app.post("/rent-sell-home/submit-first",checkLogin,async(e,r)=>{try{let{nameOfHouseOwner:s,emailOfOwner:t,country:o,ownerPhnNumber:a,pincodeOfOwner:n,propertyType:i,rentOrSell:p,cityName:l}=e.body;e.session.ownerDetails={nameOfHouseOwner:s,emailOfOwner:t,country:o,ownerPhnNumber:a,pincodeOfOwner:n,propertyType:i,rentOrSell:p,cityName:l},r.redirect("/rent-sell-home?page=secondPage")}catch(d){console.error("Error processing owner details:",d),r.status(500).render("error",{errorMessage:"Error processing owner details"})}}),app.post("/rent-sell-home-secondePage",checkLogin,async(e,r)=>{try{let{propertyAddress:s,minPrice:t,maxPrice:o,propertyDescription:a,propertySize:n,propertyType:i}=e.body;e.session.propertyDetails={propertyAddress:s,propertySize:n,minPrice:t,maxPrice:o,propertyDescription:a,propertyType:i},r.redirect("/rent-sell-home?page=thirdPage")}catch(p){console.error("Error processing property details:",p),r.status(500).render("error",{errorMessage:"Error processing property details"})}}),app.post("/rent-sell-home/submit-third",checkLogin,upload.array("propertyImage",5),async(e,r)=>{if(!e.files||e.files.length<5)return r.status(400).json({message:"Please upload at least 5 photos."});try{let s=e.files.map(e=>({name:e.originalname,data:e.buffer,contentType:e.mimetype}));e.session.propertyImages=s,r.json({message:"Images uploaded successfully."})}catch(t){r.status(500).json({message:t.message})}}),app.post("/rent-sell-home/final-submit",checkLogin,async(e,r)=>{try{let s=e.session.userId,t=await User.findById(s),o=e.session.ownerDetails,a=e.session.propertyDetails,n=e.session.propertyImages;t.details.push({ownerDetails:o,propertyDetails:a,propertyImages:n}),await t.save(),e.session.ownerDetails=null,e.session.propertyDetails=null,e.session.propertyImage=null,r.redirect("/thank-you")}catch(i){console.error("Error processing final submission:",i),r.status(500).render("error",{errorMessage:"Error processing final submission"})}}),app.get("/image/:id",async(e,r)=>{try{let s=e.params.id,t=await User.findOne({"details.propertyImages._id":s});if(!t)return r.status(404).send("Image not found");let o=t.details.reduce((e,r)=>{let t=r.propertyImages.id(s);return t||e},null);if(!o)return r.status(404).send("Image not found");r.set("Content-Type",o.contentType),r.send(o.data)}catch(a){r.status(500).send(a.message)}}),app.get("/thank-you",(e,r)=>{r.render("thank-you")}),app.get("/properties",checkLogin,async(e,r)=>{try{let s;s=e.query.pincode||e.query.minPrice||e.query.maxPrice||e.query.rentOrSell?await User.find({"details.propertyDetails":{$exists:!0,$not:{$size:0}}}):await User.aggregate([{$match:{"details.propertyDetails":{$exists:!0,$not:{$size:0}}}},{$sample:{size:20}}]);let t=e.session.userId,o=s.reduce((r,s)=>(s.details.forEach(o=>{let a=t&&s._id.equals(t),n=!0;e.query.pincode&&(n=n&&o.ownerDetails.pincodeOfOwner===parseInt(e.query.pincode)),(e.query.minPrice||e.query.maxPrice)&&(e.query.minPrice&&(n=n&&o.propertyDetails.minPrice>=parseInt(e.query.minPrice)),e.query.maxPrice&&(n=n&&o.propertyDetails.maxPrice<=parseInt(e.query.maxPrice))),e.query.rentOrSell&&(n=n&&o.ownerDetails.rentOrSell===String(e.query.rentOrSell)),e.query.propertyType&&(n=n&&o.ownerDetails.propertyType===String(e.query.propertyType)),e.query.propertyTypeLive&&(n=n&&o.propertyDetails.propertyType===String(e.query.propertyTypeLive)),n&&r.push({userId:s._id,propertyId:o._id,...o.propertyDetails,...o.ownerDetails,isOwner:a})}),r),[]);if(0===o.length)return r.render("properties",{message:"No such property is available for this filter"});r.render("properties",{properties:o,loggedInUserId:t})}catch(a){console.error("Error fetching properties:",a),r.status(500).render("error",{errorMessage:"Internal Server Error"})}});let propertyId;app.get("/property-details/:propertyId",checkLogin,async(e,r)=>{try{propertyId=e.params.propertyId;let s=e.session.userId,t=await User.findOne({"details._id":propertyId});if(!t)return r.status(404).render("error",{errorMessage:"Property not found"});let o=t.details.id(propertyId),a=s&&t._id.equals(s);r.render("property-details",{property:o,isOwner:a})}catch(n){console.error("Error fetching property details:",n),r.status(500).render("error",{errorMessage:"Internal Server Error"})}}),app.post("/request-to-connect",async(e,r)=>{try{e.body.nameofclient,e.body.emailofclient;let s=e.body.messageofclient,t=e.session.userId,o=await User.findById(t),a=await User.findOne({"details._id":propertyId});if(!a)return r.status(404).send("Property owner not found");let n=a.details.id(propertyId),i=n.ownerDetails.emailOfOwner,p=n.ownerDetails.nameOfHouseOwner,l=o.username;requestorName=o.nameU;let d={message:`You have <b> requested to connect </b> with <b> ${p} </b>. Please check your email for further details.`},u={message:`You have <b> request to connect </b> from <b> ${o.nameU} </b>. Please check your email for further details.`};o.notifications.unshift(d),a.notifications.unshift(u);o.notifications.length>10&&o.notifications.splice(10),a.notifications.length>10&&a.notifications.splice(10),await Promise.all([o.save(),a.save()]);let c=nodemailer.createTransport({host:"smtp-relay.brevo.com",port:587,secure:!1,auth:{user:process.env.userEmail,pass:process.env.passEmail}}),y={from:l,to:i,subject:"Phone Number Request for Your Property",html:`<p>Dear ${p}</p>

            <p>We are excited to inform you that a potential buyer/renter, <strong> ${requestorName}
             (${l})</strong>, is interested in your property listed on RentEase.
             <p><strong>message by ${requestorName}:</strong> ${s}</p>
             
             They have requested to connect with you to discuss further details and have asked for your phone number.</p>

            <p><strong>Caution:</strong> By clicking the link below, you will share your phone number with the requester, and their phone number will also be shared with you.</p>
                   <p>If you wish to share your phone number, please click the link below:</p>
                   <p><a href="https://rentease-a1ne.onrender.com/approve-connect/${propertyId}/${t}">Approve Request</a></p>`};c.sendMail(y,(e,s)=>{if(e)return console.error(e),r.status(500).send("Error sending email");r.render("requestsent")})}catch(m){console.error("Error processing request:",m),r.status(500).send("Internal Server Error")}}),app.get("/notification-of-user",checkLogin,async(e,r)=>{let s=e.session.userId,t=await User.findById(s),o=t.notifications;r.json(o)}),app.get("/approve-connect/:propertyId/:userId",async(e,r)=>{try{let{propertyId:s,userId:t}=e.params,o=await User.findOne({"details._id":s}),a=await User.findById(t);if(!o||!a)return r.status(404).send("Property owner or requesting user not found");let n=o.details.id(s),i=n.ownerDetails.ownerPhnNumber,p=n.ownerDetails.emailOfOwner,l=a.username,d=a.phone,u=nodemailer.createTransport({host:"smtp-relay.brevo.com",port:587,secure:!1,auth:{user:process.env.userEmail,pass:process.env.passEmail}}),c={from:"yashsabne39@gmail.com",to:l,subject:"Approved: Phone Number Request for Property",html:`<p>Hello,</p>
                   <p>The owner has approved your request. The phone number is: ${i}</p>`},y={from:"yashsabne39@gmail.com",to:p,subject:"Phone Number Request Approved",html:`<p>Hello,</p>
                   <p>You have approved the phone number request. The requester's phone number is: ${d}</p>`};u.sendMail(c,(e,s)=>{if(e)return console.error(e),r.status(500).send("Error sending email to requester");console.log("Email sent to requester")}),u.sendMail(y,(e,s)=>{if(e)return console.error(e),r.status(500).send("Error sending email to owner")}),r.render("approvalsuccess")}catch(m){console.error("Error processing approval:",m),r.status(500).send("Internal Server Error")}});const crypto=require("crypto"),razorpay=new Razorpay({key_id:process.env.KEY_ID,key_secret:process.env.KEY_SECRET});app.post("/api/razorpay/createOrder",async(e,r)=>{let{amount:s,currency:t,receipt:o}=e.body,a={amount:100*s,currency:t,receipt:o};try{let n=await razorpay.orders.create(a);r.status(200).json(n)}catch(i){r.status(500).json({error:i.message})}}),app.post("/api/razorpay/verifyPayment",(e,r)=>{let{order_id:s,payment_id:t,signature:o}=e.body,a=crypto.createHmac("sha256",process.env.KEY_SECRET);a.update(s+"|"+t);let n=a.digest("hex");n===o?r.status(200).json({success:!0}):r.status(400).json({success:!1,message:"Payment verification failed"})}),app.get("/get-phn-number",async(e,r)=>{let s=await User.findOne({"details._id":propertyId});r.json(s.phone)}),app.post("/got-number-onmail",async(e,r)=>{try{let s=e.session.userId,t=await User.findById(s),o=await User.findOne({"details._id":propertyId});if(!t)return console.error("User not found"),r.status(404).json({success:!1,message:"User not found"});let a=e.body.originalMobileNumber,n=nodemailer.createTransport({host:process.env.hostEmail,port:587,secure:!1,auth:{user:process.env.userEmail,pass:process.env.passEmail}}),i={from:"yashsabne29@gmail.com",to:t.username,subject:"Contact Reveal Success, Got the Number",html:`
                <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                    <h2 style="color: #4CAF50;">Contact Revealed</h2>
                    <p>Dear ${t.nameU},</p>
                    <p>We hope this message finds you well. We have received your payment successfully and the phone number of the owner is received by you.</p>
                    <div style="border-left: 4px solid #4CAF50; padding-left: 16px; margin: 20px 0;">
                        <p><strong>Here is the number:</strong> </p>
                        <p>${a}</p>     
                        <p>of the property owner having email address: ${o.username} & name: ${o.nameU}</p>
                    </div>
                    <p>Thank you for using our platform to list your property. We wish you the best in finding the perfect tenant/buyer.</p>
                    <p>Best regards,</p>
                    <p>The RentEase Team - YashDev</p>
                </div>`};n.sendMail(i,(e,s)=>e?(console.error("Error sending email:",e),r.status(500).json({success:!1,message:"Error sending email"})):(console.log("Email sent:",s.response),r.status(200).json({success:!0,message:"Email sent successfully"})))}catch(p){return console.error("Error in /got-number-onmail endpoint:",p),r.status(500).json({success:!1,message:"Internal server error"})}}),app.post("/get-contact",async function(e,r){let s=new emailAdvertise({emailAdvertise:e.body.email});try{let t=e.body.email,o=await emailAdvertise.findOne({username:t});if(o)return r.send("User already exists");await s.save(),r.render("index",{messForClient:"Suscribed sucessfully for latest updates"})}catch(a){console.error(a),r.status(500).render("error",{errorMessage:"Internal Server Error"})}}),app.get("/thank-you-contact",(e,r)=>{r.render("thank-you-contact")}),app.get("/contact-us",(e,r)=>{r.render("contact-us")}),app.post("/contact-submit",async(e,r)=>{let{name:s,email:t,subject:o,message:a}=e.body;try{let n=require("nodemailer"),i=n.createTransport({host:process.env.hostEmail,port:587,secure:!1,auth:{user:process.env.userEmail,pass:process.env.passEmail}}),p={from:t,to:"yashsabne39@gmail.com",subject:`Contact Form: ${o}`,text:`Name: ${s}
Email: ${t}
Message: ${a}`};i.sendMail(p,(e,s)=>{if(e)return console.error(e),r.status(500).send("Error sending email");console.log("Email sent: "+s.response)}),r.redirect("/thank-you-contact")}catch(l){console.error("Error sending contact form:",l),r.status(500).send("Something went wrong, please try again later.")}}),app.get("/termscondition",(e,r)=>{r.render("termscondition")}),app.listen(3e3,()=>{console.log("Server is running on http://localhost:3000")});
